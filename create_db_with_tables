CREATE DATABASE Krautundrueben;
CREATE TABLE IF NOT EXISTS customer (
    customer_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    last_name VARCHAR(50),
    first_name VARCHAR(50),
    date_of_birth DATE,
    street VARCHAR(50),
    house_number VARCHAR(6),
    zip_code VARCHAR(5),
    city VARCHAR(50),
    phone VARCHAR(25),
    email VARCHAR(50)
);

-- Create TABLE supplier
CREATE TABLE IF NOT EXISTS supplier (
    supplier_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    supplier_name VARCHAR(50),
    street VARCHAR(50),
    house_number VARCHAR(6),
    zip_code VARCHAR(5),
    city VARCHAR(50),
    phone VARCHAR(25),
    email VARCHAR(50)
);

-- Create TABLE ingredient
CREATE TABLE IF NOT EXISTS ingredient (
    ingredient_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    description VARCHAR(50),
    unit VARCHAR(25),
    net_price DECIMAL(10, 2),
    stock INTEGER,
    supplier_id INTEGER,
    calories INTEGER,
    carbohydrates DECIMAL(10, 2),
    protein DECIMAL(10, 2),
    FOREIGN KEY (supplier_id) REFERENCES supplier (supplier_id)
);

-- Create TABLE "order"
CREATE TABLE IF NOT EXISTS "order" (
    order_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    customer_id INTEGER,
    order_date DATE,
    invoice_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customer (customer_id)
);

-- Create TABLE order_ingredient
CREATE TABLE IF NOT EXISTS order_ingredient (
    order_id INTEGER NOT NULL,
    ingredient_id INTEGER,
    quantity INTEGER,
    PRIMARY KEY (order_id, ingredient_id),
    FOREIGN KEY (order_id) REFERENCES "order" (order_id),
    FOREIGN KEY (ingredient_id) REFERENCES ingredient (ingredient_id)
);

CREATE TABLE IF NOT EXISTS recipe (
    recipe_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    net_price DECIMAL(10, 2),
    rec_name VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS rec_ing (
    recipe_id INTEGER,
    ingredient_id INTEGER,
    quantity INTEGER,
    PRIMARY KEY (recipe_id, ingredient_id),
    FOREIGN KEY (recipe_id) REFERENCES recipe (recipe_id),
    FOREIGN KEY (ingredient_id) REFERENCES ingredient (ingredient_id)
);

CREATE TABLE IF NOT EXISTS order_recipe (
    recipe_id INTEGER,
    order_id INTEGER,
    quantity INTEGER,
    PRIMARY KEY (recipe_id, order_id),
    FOREIGN KEY (order_id) REFERENCES "order" (order_id),
    FOREIGN KEY (recipe_id) REFERENCES recipe (recipe_id)
);

CREATE TABLE IF NOT EXISTS nut_cat (
    nut_cat_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS nut_rec (
    nut_cat_id INTEGER,
    recipe_id INTEGER,
    PRIMARY KEY (nut_cat_id, recipe_id),
    FOREIGN KEY (nut_cat_id) REFERENCES nut_cat (nut_cat_id),
    FOREIGN KEY (recipe_id) REFERENCES recipe (recipe_id)
);

CREATE TABLE IF NOT EXISTS alg_lim (
    alg_lim_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS alg_rec (
    alg_lim_id INTEGER,
    recipe_id INTEGER,
    PRIMARY KEY (alg_lim_id, recipe_id),
    FOREIGN KEY (alg_lim_id) REFERENCES alg_lim (alg_lim_id),
    FOREIGN KEY (recipe_id) REFERENCES recipe (recipe_id)
);
